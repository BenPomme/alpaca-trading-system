name: Test Simple Dashboard Update

on:
  workflow_dispatch:
  push:
    branches: [ main ]

permissions:
  contents: write

jobs:
  test-update:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install alpaca-trade-api
    
    - name: Create directories
      run: |
        mkdir -p data
        mkdir -p docs/api
    
    - name: Test API connection
      env:
        ALPACA_PAPER_API_KEY: ${{ secrets.ALPACA_PAPER_API_KEY }}
        ALPACA_PAPER_SECRET_KEY: ${{ secrets.ALPACA_PAPER_SECRET_KEY }}
      run: |
        python -c "
        import alpaca_trade_api as tradeapi
        import os
        
        api_key = os.getenv('ALPACA_PAPER_API_KEY')
        secret_key = os.getenv('ALPACA_PAPER_SECRET_KEY')
        
        print(f'API Key length: {len(api_key) if api_key else 0}')
        print(f'Secret Key length: {len(secret_key) if secret_key else 0}')
        
        if api_key and secret_key:
            api = tradeapi.REST(
                key_id=api_key,
                secret_key=secret_key,
                base_url='https://paper-api.alpaca.markets',
                api_version='v2'
            )
            account = api.get_account()
            print(f'‚úÖ API Connection successful: Portfolio Value: \${account.portfolio_value}')
        else:
            print('‚ùå API credentials not found')
        "
    
    - name: Generate minimal dashboard data
      env:
        ALPACA_PAPER_API_KEY: ${{ secrets.ALPACA_PAPER_API_KEY }}
        ALPACA_PAPER_SECRET_KEY: ${{ secrets.ALPACA_PAPER_SECRET_KEY }}
      run: |
        python -c "
        import json
        import os
        from datetime import datetime
        
        # Simple test data
        test_data = {
            'portfolio': {'value': 99131.16, 'cash': 24532.57},
            'positions': [],
            'performance': {'winRate': 31.25, 'totalTrades': 48},
            'generated_at': datetime.now().isoformat(),
            'data_source': 'github_actions_test'
        }
        
        os.makedirs('docs/api', exist_ok=True)
        with open('docs/api/dashboard-data.json', 'w') as f:
            json.dump(test_data, f, indent=2)
        
        print('‚úÖ Test dashboard data generated')
        "
    
    - name: Check for changes and commit
      run: |
        git config --local user.email "github-actions@alpaca-trading.com"
        git config --local user.name "GitHub Actions Test"
        
        if git diff --quiet docs/api/dashboard-data.json; then
          echo "No changes to commit"
        else
          git add docs/api/dashboard-data.json
          git commit -m "üß™ Test dashboard update from GitHub Actions $(date -u '+%Y-%m-%d %H:%M UTC')"
          git push
          echo "‚úÖ Test data committed and pushed"
        fi